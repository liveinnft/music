#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import os
from database import get_playlists, get_db_connection

def check_database_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    current_dir = os.getcwd()
    print(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    
    db_files = []
    for file in os.listdir(current_dir):
        if file.endswith('.db'):
            db_files.append(file)
    
    print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ .db —Ñ–∞–π–ª—ã: {db_files}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ music.db
    if os.path.exists('music.db'):
        size = os.path.getsize('music.db')
        print(f"‚úÖ music.db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
        return True
    else:
        print("‚ùå music.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    try:
        conn = sqlite3.connect('music.db')
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cur.fetchall()
        print(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {[table[0] for table in tables]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã playlists
        cur.execute("SELECT COUNT(*) FROM playlists")
        playlist_count = cur.fetchone()[0]
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {playlist_count}")
        
        if playlist_count > 0:
            cur.execute("SELECT * FROM playlists")
            playlists = cur.fetchall()
            print("–ü–ª–µ–π–ª–∏—Å—Ç—ã –≤ –±–∞–∑–µ:")
            for playlist in playlists:
                print(f"  - ID: {playlist[0]}, –ù–∞–∑–≤–∞–Ω–∏–µ: {playlist[1]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã songs
        cur.execute("SELECT COUNT(*) FROM songs")
        song_count = cur.fetchone()[0]
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {song_count}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")

def check_database_functions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ database.py"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π database.py:")
    
    try:
        playlists = get_playlists()
        print(f"get_playlists() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {playlists}")
        print(f"–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(playlists)}")
        
        if playlists:
            print("–î–µ—Ç–∞–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤:")
            for pl in playlists:
                print(f"  - {pl} (—Ç–∏–ø: {type(pl)})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_playlists(): {e}")

def check_web_app_path():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Ç–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è web_app
    web_app_dir = os.path.join(os.getcwd(), 'web_app')
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è web_app: {web_app_dir}")
    print(f"web_app —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(web_app_dir)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –∏—â–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö web_app
    if os.path.exists(web_app_dir):
        os.chdir(web_app_dir)
        print(f"–ò–∑–º–µ–Ω–∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞: {os.getcwd()}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ music.db –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ web_app
        local_db = os.path.exists('music.db')
        parent_db = os.path.exists('../music.db')
        
        print(f"music.db –≤ web_app/: {local_db}")
        print(f"music.db –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {parent_db}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.chdir('..')

def fix_database_path():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø—É—Ç—è–º–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Å –ø—É—Ç—è–º–∏:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è music.db
    root_db = os.path.exists('music.db')
    web_app_db = os.path.exists('web_app/music.db')
    
    if root_db and not web_app_db:
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ web_app –∏—â–µ—Ç –±–∞–∑—É –≤ —Å–≤–æ–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        print("\nüí° –†–µ—à–µ–Ω–∏—è:")
        print("1. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å music.db –≤ web_app/")
        print("2. –ò–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –≤ database.py –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π")
        print("3. –ó–∞–ø—É—Å–∫–∞—Ç—å web_app –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ (1-3) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞: ")
        
        if choice == "1":
            import shutil
            shutil.copy('music.db', 'web_app/music.db')
            print("‚úÖ music.db —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ web_app/")
        elif choice == "2":
            print("–ù—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å DB_NAME –≤ database.py –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å")
        elif choice == "3":
            print("–ó–∞–ø—É—Å–∫–∞–π—Ç–µ 'python web_app/app.py' –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")

if __name__ == "__main__":
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n")
    
    check_database_file()
    check_database_structure()
    check_database_functions()
    check_web_app_path()
    fix_database_path()
    
    print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

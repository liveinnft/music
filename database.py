import sqlite3
import os
from os import path

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DB_NAME = os.path.join(BASE_DIR, 'music.db')

def init_db():
    if not path.exists(DB_NAME):
        conn = sqlite3.connect(DB_NAME)
        cur = conn.cursor()
        cur.execute('''
            CREATE TABLE playlists (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL UNIQUE
            )
        ''')
        cur.execute('''
            CREATE TABLE songs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT,
                author TEXT,
                file_id TEXT,
                playlist_id INTEGER,
                FOREIGN KEY(playlist_id) REFERENCES playlists(id)
            )
        ''')
        conn.commit()
        conn.close()
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {DB_NAME}")
    else:
        print(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}")

def get_db_connection():
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–∏
    return conn

def get_playlists():
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT * FROM playlists")
    playlists = cur.fetchall()
    conn.close()
    return playlists

def add_playlist(name):
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute("INSERT INTO playlists (name) VALUES (?)", (name,))
        conn.commit()
        print(f"[+] –ü–ª–µ–π–ª–∏—Å—Ç '{name}' —Å–æ–∑–¥–∞–Ω.")
    except sqlite3.IntegrityError as e:
        print(f"[!] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        raise e
    finally:
        conn.close()

def add_song(title, author, file_id, playlist_id):
    conn = get_db_connection()
    cur = conn.cursor()
    try:
        cur.execute(
            "INSERT INTO songs (title, author, file_id, playlist_id) VALUES (?, ?, ?, ?)",
            (title, author, file_id, playlist_id)
        )
        conn.commit()
        print(f"[+] –¢—Ä–µ–∫ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç ID={playlist_id}.")
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
        raise e
    finally:
        conn.close()

def get_songs_by_playlist(playlist_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        SELECT s.id, s.title, s.author, s.file_id, p.name AS playlist_name
        FROM songs s
        JOIN playlists p ON s.playlist_id = p.id
        WHERE s.playlist_id = ?
    """, (playlist_id,))
    songs = cur.fetchall()
    conn.close()
    return songs

def get_song_by_id(song_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–∫ –ø–æ ID"""
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("SELECT * FROM songs WHERE id = ?", (song_id,))
    song = cur.fetchone()
    conn.close()
    return song

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
def debug_database():
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print(f"üîç –û—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}")
    print(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(DB_NAME)}")
    
    if os.path.exists(DB_NAME):
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(DB_NAME)} –±–∞–π—Ç")
        
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç—ã
            cur.execute("SELECT COUNT(*) FROM playlists")
            playlist_count = cur.fetchone()[0]
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {playlist_count}")
            
            if playlist_count > 0:
                cur.execute("SELECT * FROM playlists")
                playlists = cur.fetchall()
                print("–ü–ª–µ–π–ª–∏—Å—Ç—ã:")
                for pl in playlists:
                    print(f"  - {pl['id']}: {pl['name']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–∫–∏
            cur.execute("SELECT COUNT(*) FROM songs")
            song_count = cur.fetchone()[0]
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤: {song_count}")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ: {e}")